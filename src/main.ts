import { mainChainOfResponsibility } from './design-patterns/behaviorial/chain-of-responsibility/index.ts';
import { mainCommand } from './design-patterns/behaviorial/command/index.ts';
import { mainIterator } from './design-patterns/behaviorial/iterator/index.ts';
import { mainMediator } from './design-patterns/behaviorial/mediator/index.ts';
import { mainMemento } from './design-patterns/behaviorial/memento/index.ts';
import { mainObserver } from './design-patterns/behaviorial/observer/index.ts';
import { mainState } from './design-patterns/behaviorial/state/index.ts';
import { mainStrategy } from './design-patterns/behaviorial/strategy/index.ts';
import { mainAbstractFactory } from './design-patterns/creational/abstract-factory/index.ts';
import { MainBuilder } from './design-patterns/creational/builder/index.ts';
import { mainFactoryFunction } from './design-patterns/creational/factory-function/index.ts';
import { mainFactory } from './design-patterns/creational/factory-method/index.ts';
import { mainImmutableWithCopy } from './design-patterns/creational/immutability-with-copy/index.ts';
import { mainPrototype } from './design-patterns/creational/prototype/index.ts';
import { mainSigleton } from './design-patterns/creational/singleton/index.ts';
import { mainAdapter } from './design-patterns/structural/adapter/index.ts';
import { mainBrigde } from './design-patterns/structural/bridge/index.ts';
import { mainComposite } from './design-patterns/structural/composite/index.ts';
import { mainDecorator } from './design-patterns/structural/decorator/index.ts';
import { mainFacade } from './design-patterns/structural/facade/index.ts';
import { mainFlyweight } from './design-patterns/structural/flyweight/index.ts';
import { mainProxy } from './design-patterns/structural/proxy/index.ts';

const main = () => {
  console.log('===== Creational Patterns =====');
  console.log('🔶 Pattern Builder::::: ✳️');
  MainBuilder.run();
  console.log('🔶 Pattern Factory Method::::: ✳️');
  mainFactory();
  console.log('🔶 Pattern Abstract Factory::::: ✳️');
  mainAbstractFactory();
  console.log('🔶 Pattern Prototype::::: ✳️');
  mainPrototype();
  console.log('🔶 Immutability with Copy::::: ✳️');
  mainImmutableWithCopy();
  console.log('🔶 Singleton::::: ✳️');
  mainSigleton();
  console.log('🔶 Factory Function::::: ✳️');
  mainFactoryFunction();
  console.log('===== Structural Patterns =====');
  console.log('🔶 Pattern Adapter::::: ✳️');
  mainAdapter();
  console.log('🔶 Pattern Brigde::::: ✳️');
  mainBrigde();
  console.log('🔶 Pattern Composite::::: ✳️');
  mainComposite();
  console.log('🔶 Pattern Decorator::::: ✳️');
  mainDecorator();
  console.log('🔶 Pattern Facade::::: ✳️');
  mainFacade();
  console.log('🔶 Pattern Flyweight::::: ✳️');
  mainFlyweight();
  console.log('🔶 Pattern Proxy::::: ✳️');
  mainProxy();
  console.log('===== Behavioral Patterns =====');
  console.log('🔶 Pattern Chain of Responsibility::::: ✳️');
  mainChainOfResponsibility();
  console.log('🔶 Pattern Command::::: ✳️');
  mainCommand();
  console.log('🔶 Pattern Iterator::::: ✳️');
  mainIterator();
  console.log('🔶 Pattern Mediator::::: ✳️');
  mainMediator();
  console.log('🔶 Pattern Memento::::: ✳️');
  mainMemento();
  console.log('🔶 Pattern Observer::::: ✳️');
  mainObserver();
  console.log('🔶 Pattern State::::: ✳️');
  mainState();
  console.log('🔶 Pattern Strategy::::: ✳️');
  mainStrategy();
};

main();
